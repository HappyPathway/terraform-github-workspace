name: ${title(environment)} - Terraform Apply

on:
  push:
    branches:
      - ${branch}
  workflow_dispatch:

concurrency:
  group: ${repo_name}-${environment}
  cancel-in-progress: false

permissions: write-all

jobs:
  Plan:
    runs-on: ["${runs_on}"]

    outputs:
      commit_sha: $${{ steps.git_show.outputs.commit_sha }}
      cache_key: $${{ steps.terraform_init.outputs.s3_upload_path }}
      github_token: $${{ steps.github_credentials.outputs.github_token }}
      aws_access_key_id: $${{ steps.aws_auth.outputs.aws_access_key_id }}
      aws_secret_access_key: $${{ steps.aws_auth.outputs.aws_secret_access_key }}
      aws_session_token: $${{ steps.aws_auth.outputs.aws_session_token }}
      pending_changes: $${{ steps.terraform_plan.outputs.pending_changes }}

    steps:
      - uses: ${repo_org}/${checkout}
        id: checkout
        with:
          persist-credentials: false

      - name: git show
        id: git_show
        run: |
          echo "commit_sha=$(git show | grep commit | head -1 | awk '{ print $NF }')" >> $GITHUB_ENV
          echo "commit_sha=$(git show | grep commit | head -1 | awk '{ print $NF }')" >> $GITHUB_OUTPUT

      - name: AWS Auth
        id: aws_auth
        uses: ${repo_org}/${aws_auth}
        with:
          ecs: true

      - name: Setup GITHUB Credentials
        id: github_credentials
        uses: ${repo_org}/${gh_auth}
        with:
          github_app_pem_file: $${{ secrets.GH_APP_PEM_FILE }}
          github_app_installation_id: $${{ vars.GH_APP_INSTALLATION_ID }}
          github_base_url: "$${{ github.server_url }}/"

      - name: Terraform Init
        uses: ${repo_org}/${terraform_init}
        id: terraform_init
        with:
          commit_sha: $${{ env.commit_sha }}
          checkout: false
          terraform_version: $${{ vars.terraform_version }}
          workspace: ${environment}
          backend_config: ${backend_config}
          setup_terraform: true
          terraform_init: true
          cache_bucket: ${cache_bucket}
        env:
          GITHUB_TOKEN: $${{ steps.github_credentials.outputs.github_token }}
          AWS_ACCESS_KEY_ID: $${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: $${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: $${{ steps.aws_auth.outputs.aws_session_token }}

      - name: Terraform Plan
        id: terraform_plan
        uses: ${repo_org}/${terraform_plan}
        with:
          terraform_version: $${{ vars.terraform_version }}
          workspace: ${environment}
          commit_sha: $${{ steps.terraform_init.outputs.commit_sha }}
          varfile: varfiles/${environment}.tfvars
          download_cache: true
          setup_terraform: false
          cache_bucket: ${cache_bucket}
          cache_key: $${{ steps.terraform_init.outputs.s3_upload_path }}
        env:
          AWS_ACCESS_KEY_ID: $${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: $${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: $${{ steps.aws_auth.outputs.aws_session_token }}
          GITHUB_TOKEN: $${{ steps.github_credentials.outputs.github_token }}
          GITHUB_OWNER: $${{ github.repository_owner }}
          GITHUB_BASE_URL: "$${{ github.server_url }}/"
          HTTP_PROXY: $${{ vars.http_proxy }}
          HTTPS_PROXY: $${{ vars.https_proxy}}
          NO_PROXY: $${{ vars.no_proxy}}
          %{~ for var in vars }
          TF_VAR_${var}: $${{ vars.${var} }}
          %{ endfor }
          %{~ for secret in secrets }
          TF_VAR_${secret}: $${{ secrets.${secret} }}
          %{ endfor }

      - name: cleanup s3
        if: $${{ failure() }}
        id: s3_cleanup
        uses: ${repo_org}/${s3_cleanup}
        with:
          cache_bucket: ${cache_bucket}
          cache_key: $${{ needs.Plan.outputs.cache_key }}


  Apply:
    # The type of runner that the job will run on
    runs-on: ["${runs_on}"]
    needs: Plan
    environment: ${environment}
    steps:
      - name: AWS Auth
        id: aws_auth
        uses: ${repo_org}/${aws_auth}
        with:
          ecs: true

      - name: Setup GITHUB Credentials
        id: github_credentials
        uses: ${repo_org}/${gh_auth}
        with:
          github_app_pem_file: $${{ secrets.GH_APP_PEM_FILE }}
          github_app_installation_id: $${{ vars.GH_APP_INSTALLATION_ID }}
          github_base_url: "$${{ github.server_url }}/"

      - name: Terraform Apply
        uses: ${repo_org}/${terraform_apply}
        with:
          terraform_version: $${{ vars.terraform_version }}
          workspace: ${environment}
          commit_sha: $${{ needs.Plan.outputs.commit_sha }}
          download_cache: true
          setup_terraform: true
          terraform_wrapper: false
          cache_bucket: ${cache_bucket}
          cache_key: $${{ needs.Plan.outputs.cache_key }}
        env:
          AWS_ACCESS_KEY_ID: $${{ steps.aws_auth.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: $${{ steps.aws_auth.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: $${{ steps.aws_auth.outputs.aws_session_token }}
          GITHUB_TOKEN: $${{ steps.github_credentials.outputs.github_token }}
          GITHUB_OWNER: $${{ github.repository_owner }}
          GITHUB_BASE_URL: "$${{ github.server_url }}/"
          HTTP_PROXY: $${{ vars.http_proxy }}
          HTTPS_PROXY: $${{ vars.https_proxy}}
          NO_PROXY: $${{ vars.no_proxy}}

      - name: cleanup s3
        if: $${{ always() }}
        id: s3_cleanup
        uses: ${repo_org}/${s3_cleanup}
        with:
          cache_bucket: ${cache_bucket}
          cache_key: $${{ needs.Plan.outputs.cache_key }}
     
    
